# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import quote_pb2 as quote__pb2


class QuoteServiceStub(object):
    """-----------------Cart service-----------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OnNotifyTicks = channel.unary_unary(
                '/quotesig.QuoteService/OnNotifyTicks',
                request_serializer=quote__pb2.Tick.SerializeToString,
                response_deserializer=quote__pb2.Empty.FromString,
                )
        self.OnNotifyOHLC = channel.unary_unary(
                '/quotesig.QuoteService/OnNotifyOHLC',
                request_serializer=quote__pb2.OHLC.SerializeToString,
                response_deserializer=quote__pb2.Empty.FromString,
                )
        self.OnNotifyTradeSignal = channel.unary_unary(
                '/quotesig.QuoteService/OnNotifyTradeSignal',
                request_serializer=quote__pb2.Signal.SerializeToString,
                response_deserializer=quote__pb2.Empty.FromString,
                )


class QuoteServiceServicer(object):
    """-----------------Cart service-----------------

    """

    def OnNotifyTicks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnNotifyOHLC(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnNotifyTradeSignal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QuoteServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OnNotifyTicks': grpc.unary_unary_rpc_method_handler(
                    servicer.OnNotifyTicks,
                    request_deserializer=quote__pb2.Tick.FromString,
                    response_serializer=quote__pb2.Empty.SerializeToString,
            ),
            'OnNotifyOHLC': grpc.unary_unary_rpc_method_handler(
                    servicer.OnNotifyOHLC,
                    request_deserializer=quote__pb2.OHLC.FromString,
                    response_serializer=quote__pb2.Empty.SerializeToString,
            ),
            'OnNotifyTradeSignal': grpc.unary_unary_rpc_method_handler(
                    servicer.OnNotifyTradeSignal,
                    request_deserializer=quote__pb2.Signal.FromString,
                    response_serializer=quote__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'quotesig.QuoteService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class QuoteService(object):
    """-----------------Cart service-----------------

    """

    @staticmethod
    def OnNotifyTicks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quotesig.QuoteService/OnNotifyTicks',
            quote__pb2.Tick.SerializeToString,
            quote__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OnNotifyOHLC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quotesig.QuoteService/OnNotifyOHLC',
            quote__pb2.OHLC.SerializeToString,
            quote__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OnNotifyTradeSignal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quotesig.QuoteService/OnNotifyTradeSignal',
            quote__pb2.Signal.SerializeToString,
            quote__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
