// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package quote_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// QuoteServiceClient is the client API for QuoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuoteServiceClient interface {
	OnNotifyTicks(ctx context.Context, in *Tick, opts ...grpc.CallOption) (*Empty, error)
	OnNotifyOHLC(ctx context.Context, in *OHLC, opts ...grpc.CallOption) (*Empty, error)
	OnNotifyTradeSignal(ctx context.Context, in *Signal, opts ...grpc.CallOption) (*Empty, error)
}

type quoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuoteServiceClient(cc grpc.ClientConnInterface) QuoteServiceClient {
	return &quoteServiceClient{cc}
}

func (c *quoteServiceClient) OnNotifyTicks(ctx context.Context, in *Tick, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/quotesig.QuoteService/OnNotifyTicks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteServiceClient) OnNotifyOHLC(ctx context.Context, in *OHLC, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/quotesig.QuoteService/OnNotifyOHLC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteServiceClient) OnNotifyTradeSignal(ctx context.Context, in *Signal, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/quotesig.QuoteService/OnNotifyTradeSignal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuoteServiceServer is the server API for QuoteService service.
// All implementations must embed UnimplementedQuoteServiceServer
// for forward compatibility
type QuoteServiceServer interface {
	OnNotifyTicks(context.Context, *Tick) (*Empty, error)
	OnNotifyOHLC(context.Context, *OHLC) (*Empty, error)
	OnNotifyTradeSignal(context.Context, *Signal) (*Empty, error)
	mustEmbedUnimplementedQuoteServiceServer()
}

// UnimplementedQuoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuoteServiceServer struct {
}

func (*UnimplementedQuoteServiceServer) OnNotifyTicks(context.Context, *Tick) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnNotifyTicks not implemented")
}
func (*UnimplementedQuoteServiceServer) OnNotifyOHLC(context.Context, *OHLC) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnNotifyOHLC not implemented")
}
func (*UnimplementedQuoteServiceServer) OnNotifyTradeSignal(context.Context, *Signal) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnNotifyTradeSignal not implemented")
}
func (*UnimplementedQuoteServiceServer) mustEmbedUnimplementedQuoteServiceServer() {}

func RegisterQuoteServiceServer(s *grpc.Server, srv QuoteServiceServer) {
	s.RegisterService(&_QuoteService_serviceDesc, srv)
}

func _QuoteService_OnNotifyTicks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tick)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServiceServer).OnNotifyTicks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quotesig.QuoteService/OnNotifyTicks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServiceServer).OnNotifyTicks(ctx, req.(*Tick))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuoteService_OnNotifyOHLC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OHLC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServiceServer).OnNotifyOHLC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quotesig.QuoteService/OnNotifyOHLC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServiceServer).OnNotifyOHLC(ctx, req.(*OHLC))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuoteService_OnNotifyTradeSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Signal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServiceServer).OnNotifyTradeSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quotesig.QuoteService/OnNotifyTradeSignal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServiceServer).OnNotifyTradeSignal(ctx, req.(*Signal))
	}
	return interceptor(ctx, in, info, handler)
}

var _QuoteService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "quotesig.QuoteService",
	HandlerType: (*QuoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnNotifyTicks",
			Handler:    _QuoteService_OnNotifyTicks_Handler,
		},
		{
			MethodName: "OnNotifyOHLC",
			Handler:    _QuoteService_OnNotifyOHLC_Handler,
		},
		{
			MethodName: "OnNotifyTradeSignal",
			Handler:    _QuoteService_OnNotifyTradeSignal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quote.proto",
}
